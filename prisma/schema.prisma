generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  guest          Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  holdings       Holding[]
  profile        Profile?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  userId        String     @id
  objective     Objective? @default(RETIREMENT)
  passive       Float?
  international Float?
  preferences   Json?
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stock {
  id             Int       @id @default(autoincrement())
  symbol         String    @unique
  name           String
  description    String?
  exchange       String
  country        String
  isEtf          Boolean
  image          String?
  previousClose  Float?
  priceTarget    Float
  beta           Float?
  dividendAmount Float?
  marketCap      BigInt
  sector         String
  pe             Float?
  epsGrowth      Float?
  Holdings       Holding[]

  @@index([name, symbol])
}

model Holding {
  id      Int    @id @default(autoincrement())
  units   Int
  stockId Int
  userId  String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  stock Stock @relation(fields: [stockId], references: [id], onDelete: Cascade)
}

enum Objective {
  RETIREMENT
  INCOME
  PRESERVATION
  FIRSTHOME
  CHILDREN
  TRADING
}
