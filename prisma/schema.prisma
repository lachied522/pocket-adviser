generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  hashedPassword   String?
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  stripeCustomerId String?
  accountType      AccountType    @default(FREE)
  mailFrequency    MailFrequency?
  accounts         Account[]
  sessions         Session[]
  holdings         Holding[]
  recommendations  Advice[]
  conversations    Conversation[]
  notes            Note[]
  profile          Profile?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  userId                String     @id
  dob                   DateTime   @default(now())
  income                Int        @default(0)
  percentIncomeInvested Float      @default(0.10)
  experience            Int        @default(0)
  riskToleranceQ1       Int        @default(3)
  riskToleranceQ2       Int        @default(3)
  riskToleranceQ3       Int        @default(3)
  riskToleranceQ4       Int        @default(3)
  objective             Objective? @default(RETIREMENT)
  international         Float?
  targetYield           Float?
  preferences           Json?
  milestones            Json?
  User                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stock {
  id                Int       @id @default(autoincrement())
  symbol            String    @unique
  name              String
  description       String?
  exchange          String
  currency          String
  country           String?
  isEtf             Boolean
  previousClose     Float?
  changesPercentage Float?
  priceTarget       Float?
  beta              Float?
  dividendAmount    Float?
  dividendYield     Float?
  marketCap         BigInt
  sector            String?
  pe                Float?
  epsGrowth         Float?
  tags              String[]
  Holdings          Holding[]

  @@index([name, symbol])
}

model Holding {
  id      Int    @id @default(autoincrement())
  units   Int
  stockId Int
  userId  String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  stock Stock @relation(fields: [stockId], references: [id], onDelete: Cascade)
}

model Advice {
  id                Int      @id @default(autoincrement())
  action            Action   @default(REVIEW)
  amount            Float?   @default(0)
  transactions      Json[]
  initialAdjUtility Float?
  finalAdjUtility   Float?
  createdAt         DateTime @default(now())
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  messages  Json?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AccountType {
  GUEST
  FREE
  PAID
  ADMIN
}

enum MailFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum Objective {
  RETIREMENT
  INCOME
  PRESERVATION
  DEPOSIT
  CHILDREN
  TRADING
}

enum Action {
  DEPOSIT
  WITHDRAW
  REVIEW
}
