import { z } from "zod";
import { format } from "date-fns";

function getTodayDate() {
    const today = new Date();
    const yyyy = today.getFullYear();
    let mm: string|number = today.getMonth() + 1; // Months start at 0!
    let dd: string|number = today.getDate();

    if (dd < 10) dd = '0' + dd;
    if (mm < 10) mm = '0' + mm;

    return dd + '/' + mm + '/' + yyyy;
}

type WebSearchResponse = {
    query: string // search query
    answer: string // generated by Tavilly AI
    results: {
        title: string
        url: string
        content: string
        score: number // closeness score?
    }[]
}

export const description = "Search the internet for market events and stock news";

export const parameters = z.object({
    query: z.string().describe("The phrase that will be used to search the internet."),
    date: z.string().optional().default(getTodayDate()).describe("The date you wish to receive results for in MM/DD/YYYY. Defaults to today."),
});

function formatResponse(data: WebSearchResponse) {
    return {
        query: data.query,
        answer: data.answer,
        results: {
            count: data.results.length,
            data: data.results.map((obj, index) => ({
                reference: index + 1,
                title: obj.title,
                content: obj.content,
                url: obj.url,
            })),
        }
    };
}

export async function searchWeb(query: string, dateString: string): Promise<any> {
    try {
        // adding date to query helps to get current information
        query = query + " " + format(new Date(dateString), 'PPP');

        const response = await fetch('https://api.tavily.com/search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                api_key: process.env.TAVILY_API_KEY,
                query,
                search_depth: "basic",
                include_answer: true,
                max_results: 5,
            })
        });
        if (!response.ok) {
            throw new Error("Error searching web");
        }
        const data = await response.json() as WebSearchResponse;
        return formatResponse(data);
    } catch (e) {
        return null;
    }
}