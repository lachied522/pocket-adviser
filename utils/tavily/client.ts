// see https://docs.tavily.com/docs/rest-api/api-reference

type TavillyRequestBody = {
    query: string
    search_depth?: "basic"|"advanced"
    topic?: "general"|"news"
    days?: number // max age of returned sources, only applies to 'news'
    max_results?: number // max number of results to return
    include_images?: boolean
    include_image_descriptions?: boolean
    include_answer?: boolean // includes short answer to query via LLM
    include_raw_content?: boolean // includes parsed HTML of each search result
    includes_domains?: string[] // array of domains to include
    exclude_domains?: string[] // array of domains to exclude
}

type Result = {
    title: string
    url: string
    content: string
    raw_content?: string  // parsed HTML if 'include_raw_content' was passed
    score: number // relevance to query from 0 to 1
    published_date?: string // date of publication
}

type TavillyResponseBody = {
    answer?: string // generated by Tavilly AI
    query: string // search query
    response_time: number
    images: string[] // urls of images, if any
    results: Result[]
}

function filterResponse(data: TavillyResponseBody, relevance: number) {
    // make sure sources are unique by url
    const urls: string[] = [];
    const filteredResults: Result[] = [];
    for (const result of data.results) {
        if (result.score > relevance && !urls.includes(result.url)) {
            filteredResults.push(result);
            urls.push(result.url);
        }
    }

    return {
        ...data,
        results: filteredResults,
    }
}

function formatResponse(data: TavillyResponseBody) {
    return {
        query: data.query,
        answer: data.answer,
        results: {
            count: data.results.length,
            data: data.results.map((obj, index) => ({
                reference: index + 1,
                title: obj.title,
                content: obj.content,
                url: obj.url,
            })),
        }
    };
}

export class TavilyClient {
    API_KEY = process.env.TAVILY_API_KEY;
    API_BASE_URL = `https://api.tavily.com/search`;

    constructor () {}

    async makeAuthenticatedAPIRequest(
        body: TavillyRequestBody
    ) {
        if (!this.API_KEY) {
            throw new Error('API key is undefined.');
        }

        const res = await fetch(this.API_BASE_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                api_key: this.API_KEY,
                ...body
            }),
        });

        if (!res.ok) {
            throw new Error(`Error searching web: ${res.status}`);
        }

        return await res.json() as TavillyResponseBody;
    }

    async getGeneralSearch(
        query: string,
        include_answer: boolean = true,
        max_results: number = 5,
        relevance: number = 0.5,
    ) {
        let data = await this.makeAuthenticatedAPIRequest({
            query,
            include_answer,
            max_results,
            topic: 'general',
            search_depth: 'basic',
        });

        if (relevance) {
            data = filterResponse(data, relevance);
        }

        return formatResponse(data);
    }

    async getLatestNews(
        query: string,
        days: number = 5,
        include_answer: boolean = true,
        max_results: number = 5,
        relevance: number = 0.5,
    ) {
        let data = await this.makeAuthenticatedAPIRequest({
            query,
            days,
            include_answer,
            max_results,
            topic: 'news',
            search_depth: 'basic',
        });

        if (relevance) {
            data = filterResponse(data, relevance);
        }

        return formatResponse(data);
    }
}